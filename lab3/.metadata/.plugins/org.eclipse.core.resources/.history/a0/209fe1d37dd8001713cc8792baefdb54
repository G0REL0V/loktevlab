import java.net.*;
import com.thetransactioncompany.jsonrpc2.*;
import com.alibaba.fastjson.JSON;
import java.util.*;
import java.io.*;


public class Server {
	
	private static class Human {
        private String message;
        private Place place;

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public Place getPlace() {
            return place;
        }

        public void setPlace(Place place) {
            this.place = place;
        }

        public void say() {
            System.out.println();
            System.out.println(getMessage() + " , " + getPlace().getName() + "!");
        }
    }

    private static class Place {
        private String name;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

	public static void main(String[] args) {
		
		Socket s = null;
		String line = "";
		JSONRPC2Request req;
		JSONRPC2Response res;
		
		String jsonString = "{'params':{'amount':175.05,'recipient':'Penny Adams'},'jsonrpc':'2.0','id':'req-001','method':'SumMatrix'}";
		
		JSONRPC2Request reqIn = null;

		try {
			reqIn = JSONRPC2Request.parse(jsonString);

		} catch (JSONRPC2ParseException e) {
			System.out.println(e.getMessage());
			// Handle exception...
		}

		// How to extract the request data
		System.out.println("Parsed request with properties :");
		System.out.println("\tmethod     : " + reqIn.getMethod());
		System.out.println("\tparameters : " + reqIn.getNamedParams());
		System.out.println("\tid         : " + reqIn.getID() + "\n\n");

		// Process request...

		// Create the response (note that the JSON-RPC ID must be echoed back)
		String result = "payment-id-001";
		JSONRPC2Response respOut = new JSONRPC2Response(result, reqIn.getID());

		// Serialise response to JSON-encoded string
		jsonString = respOut.toString();
		System.out.println(jsonString);
		
		try {
			
			ServerSocket server = new ServerSocket(8888);
			System.out.println("Wait");
			
			s = server.accept();//ожидание соединения
			System.out.println("Connect");
			
			BufferedReader ps = new BufferedReader(new InputStreamReader(s.getInputStream()));
			PrintStream ss = new PrintStream(s.getOutputStream());
			
			line = ps.readLine();
			System.out.println(line);
			
			// convert from json
	        Human newHuman = JSON.parseObject(line, Human.class);
	        newHuman.say(); // print "Hi , World!"
			
			
			
			ss.println("inshala!");
			
			ss.flush();
			
			ps.close();
			ss.close();
			server.close();
		
		}
		catch(Exception x) { 
			x.printStackTrace(); 
		}
	}
}